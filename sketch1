#include <Arduino.h>
#include <SoftwareSerial.h>


String readString; //string necessária para ler as informações no app pelo celular


#define DirVel = 4 ;//Velocidade do motor direito
#define EsqVel = 5 ; //Velocidade do motoe esquerdo
#define DirCont = 6 ;//Controle direito
#define EsqCont = 7 ;//Controle esquerdo

int PotPrim 210; //Potência do motor principal da curva
int PotSec 6; //Potênica do motor secundário durante a curva
int PotFrente 110; //Potência quando o robô estiver seguindo em frente

//Sensores//
#define s2 = A0;
#define s3 = A1;
#define s4 = A2;
#define s5 = A3;
#define s6 = A4;
#define s7 = A5;

//Valor dos Sensores//
int valors2 = 0;
int valors3 = 0;
int valors4 = 0;
int valors5 = 0;
int valors6 = 0;
int valors7 = 0;

//PID
int Kp = 0; //constante de Proporcionalidade
int Ki = 0; //constante de Integralidade
int Kd = 0; //constante de Diferencial
int P = 0, I = 0, D = 0, PID = 0;

int erro = 0;

//Serial.begin (9600)
//Serial2.begin (9600)

int linha = 100; //valor de referência que indica que o sensor está seguindo a linha


void timers (void);

void setup (void)
{
  pinMode(4 ,OUTPUT);
  pinMode(5 ,OUTPUT);
  pinMode(6 ,OUTPUT);
  pinMode(7 ,OUTPUT);

  pinMode(A0 ,INPUT);      //
  pinMode(A1 ,INPUT);
  pinMode(A2 ,INPUT);
  pinMode(A3 ,INPUT);      //input dos 6 sensores frontais 
  pinMode(A4 ,INPUT);
  pinMode(A5 ,INPUT);      //
}

/*void loop (void)
{
  frente = 
  analogWrite(DirVel, PotFrente); //velocidade mínima do motor equivale a 0
  analogWrite(EsqVel, PotFrente); //velociade máxima do motor equivale a 255
  digitalWrite(DirCont, LOW); //motor girando no sentido antihorário
  digitalWrite(EsqCont, LOW); //motor girando no sentido antihorário

  trás = 
  analogWrite(DirVel, PotFrente); //velocidade mínima do motor equivale a 0
  analogWrite(EsqVel, PotFrente); //velociade máxima do motor equivale a 255
  digitalWrite(DirCont, HIGH); //motor girando no sentido horário
  digitalWrite(EsqCont, HIGH); //motor girando no sentido horário

  curva_direita = 
  analogWrite(DirVel, 100); 
  analogWrite(EsqVel, 100); 
  digitalWrite(DirCont, HIGH); 
  digitalWrite(EsqCont, LOW);

  curva_esquerda = 
  analogWrite(DireVel, 100);
  analogWrite(EsqVel, 100);
  digitalWrite(DirCont, LOW);
  gigitalWrite(EsqCont, HIGH);


}

*/

void timers1 (void)
{
  static unsigned char contador1 = 0 ;
  if (contador1 < 3)
  {
    contador1++;
  }
  
  if (contador1 > 3)
  {
    contador1 = 0;
  }
}

void sensores (void)
{
  analogWrite(s2 , A0);
  analogWrite(s3 , A1);
  analogWrite(s4 , A2);
  analogWrite(s5 , A3);
  analogWrite(s6 , A4);
  analogWrite(s7 , A5);
 
  if (s2 == true && s7 == true) //Linha branca em pista preta
  {

  }
}

void calculo_erro (void)
{
  if ((s2 == 1) && (s3 == 1) && (s4 == 0) && (s5 == 1) && (s6 == 1) )
  {
    erro 0;
  } //(s7 = 1))
  else if ((s2 == 1) && (s3 == 0) && (s4 == 0) && (s5 == 1) && (s6 == 1) )
  {
    erro 1;
  } //(s7 = 1))
  else if ((s2 == 1) && (s3 == 1) && (s4 == 0) && (s5 == 0) && (s6 == 1) )
  {
    erro -1;
  } //(s7 = 1))
  else if ((s2 == 1) && (s3 == 1) && (s4 == 1) && (s5 == 0) && (s6 == 1) )
  {
    erro 1.5;
  } //(s7 = 1))
  else if ((s2 = 1) && (s3 = 0) && (s4 = 1) && (s5 = 1) && (s6 = 1) )
  {
    erro -1.5;
  } //(s7 = 1))
  else if ((s2 = 1) && (s3 = 1) && (s4 = 1) && (s5 = 0) && (s6 = 0) )
  {
    erro 1.75;
  } //(s7 = 1))
  else if ((s2 = 0) && (s3 = 0) && (s4 = 1) && (s5 = 1) && (s6 = 1) )
  {
    erro -1.75;
  } //(s7 = 1))
  else if ((s2 = 1) && (s3 = 1) && (s4 = 1) && (s5 = 1) && (s6 = 0) )
  {
    erro 2;
  } //(s7 = 1))
  else if ((s2 = 0) && (s3 = 1) && (s4 = 1) && (s5 = 1) && (s6 = 1) )
  {
    erro -2;
  } //(s7 = 1))
}
void PID (void)
{
  if (erro == 0)
  {
    I = 0;
  }
  P = erro;
  I = I + erro
  if (I > 255)
  {
    I = 255;
  }
  else if (I < -255)
  {
    I = -255;
  }
  D = erro - erro_anterior
  PID = (Kp * P)(Ki * I)(Kd * D)
}

void controle_motor (void)
{
  if (PID >= 0)
  {
    EsqVel = PotPrim
    DirVel = PotPrim - PID
  }
  else
  {
    EsqVel = PotPrim + PID
    DirVel = PotPrim
  }
}

/*Protótipo do código que será utilizado para 
mandar informações do módulo bluetooth HC-05 
até um aplicativo de celular*/
void bluethooth (void)
{
/* 
{
  if (Serial2.avaliable() > 0)
  
 
}
*/
} 
//////////////////////////////////////////////////

void Walk (void)
{
  valors2 = analogRead(A0);
  valors3 = analogRead(A1);
  valors4 = analogRead(A2);
  valors5 = analogRead(A3);
  valors6 = analogRead(A4);
  valors7 = analogRead(A5);
  
 

  if(valors2 > linha && valors7 < linha)
  {

  }
}


