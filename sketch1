#include <Arduino.h>
#include <SoftwareSerial.h>
#include "time.h"



String inputString = ""; //string necessária para ler as informações no app pelo celular


int DirVel = 4 ;//Velocidade do motor direito
int EsqVel = 5 ; //Velocidade do motoe esquerdo
int DirCont = 6 ;//Controle direito
int EsqCont = 7; //Controle esquerdo

int PotPrim = 60; //Potência do motor principal da curva
int PotSec = 6; //Potênica do motor secundário durante a curva
int PotFrente = 50; //Potência quando o robô estiver seguindo em frente

//Sensores//
int s2 = A0;
int s3 = A1;
int s4 = A2;
int s5 = A3;
int s6 = A4;
int s7 = A5;
int sp = 3;

//Valor dos Sensores//
int valors2 = 0;
int valors3 = 0;
int valors4 = 0;
int valors5 = 0;
int valors6 = 0;
int valors7 = 0;
int valorsp = 0;
                                                             
//Variáveis Bluetooth
int junk = 0;

//PID
double Kp= 0,495 ,Ki= 0,425, Kd = 0,05; //constante de Proporcionalidade, Integral e Diferencial 
int P = 0, I = 0, D = 0, PID = 0;
double Setpoint = ;

int erro = 0, erro_anterior = 0;

char flag 

unsigned int MaxTimer1 ;

unsigned int linha = 650 //valor de referência que indica se o sensoer está lendo a linha branca ou o tapete preto

//Declaração de funções
 
void parada (void);
void timers1(void); 
void calculo_erro (void);
void calculoPID (void);
void controle_motor (void);
void bluethooth (void);
void Walk (void);


//SoftwareSerial(0 , 1) //entradas RX e TX

int main ()
{
  TCCR0B = 0x03;  //defino o prescaler em 64
  TCNT0 = 6;  //começa em 6 e vai até 255 gerando um tempo de 1ms
  TIMSK0 = 0x01;  //habilito a interrupção do timer0
  sei();  //habilita a chave geral das interrupções
  MaxTimer1 = 500;

}

void setup (void)
{

  //Motores
  pinMode(4 ,OUTPUT);
  pinMode(5 ,OUTPUT);        // DDRB = 0b11110000
  pinMode(6 ,OUTPUT);
  pinMode(7 ,OUTPUT);


  //Sensores
  pinMode(A0 ,INPUT);      //
  pinMode(A1 ,INPUT);
  pinMode(A2 ,INPUT);
  pinMode(A3 ,INPUT);      //input dos 6 sensores frontais + sensor lateral
  pinMode(A4 ,INPUT);
  pinMode(A5 ,INPUT);
  pinMode(3 ,INPUT);      //

  Serial.begin(9600);   // Serial para Monitor Arduino para debug
  pinMode (0 ,INPUT);    // RX
  pinMode (1 ,INPUT);    // TX
}   

void loop (void)
{
  calculo_erro ();
  calculoPID ();
  controle_motor ();
  /* Walk (); */
  
  bluethooth();
  
  parada ();
 
}


 /*
  frente = 
  analogWrite(DirVel, PotFrente); //velocidade mínima do motor equivale a 0
  analogWrite(EsqVel, PotFrente); //velociade máxima do motor equivale a 255
  digitalWrite(DirCont, LOW); //motor girando no sentido antihorário
  digitalWrite(EsqCont, LOW); //motor girando no sentido antihorário

  trás = 
  analogWrite(DirVel, PotFrente); //velocidade mínima do motor equivale a 0
  analogWrite(EsqVel, PotFrente); //velociade máxima do motor equivale a 255
  digitalWrite(DirCont, HIGH); //motor girando no sentido horário
  digitalWrite(EsqCont, HIGH); //motor girando no sentido horário

  curva_direita = 
  analogWrite(DirVel, 100); 
  analogWrite(EsqVel, 100); 
  digitalWrite(DirCont, HIGH); 
  digitalWrite(EsqCont, LOW);

  curva_esquerda = 
  analogWrite(DireVel, 100);
  analogWrite(EsqVel, 100);
  digitalWrite(DirCont, LOW);
  digitalWrite(EsqCont, HIGH);

 */


ISR(TIMER0_OVF_vect)
{
    TCNT0 = 6;
    timers1();
}

void timers1 (void)
{
  static unsigned char contador1 = 0 ;
  if (contador1 < 10)
  {
    contador1++;
  }
  
  if (contador1 > 10)
  {
    sensor_parada();
    contador1 = 0;
  }
}



void calculo_erro (void)
{
  analogWrite (A0, 0);
  analogWrite (A1, 0);
  analogWrite (A3, 0);
  analogWrite (A4, 0);
  analogWrite (A5, 0);
  analogWrite (A6, 0);

  if ((s2 >= linha) && (s3 >= linha) && (s4 <= linha) && (s5 >= linha) && (s6 >= linha) && (s7 >= linha))
  {
    erro = 0;
  } 
  else if ((s2 >= linha) && (s3 <= linha) && (s4 <= linha) && (s5 >= linha) && (s6 >= linha) && (s7 >= linha))
  {
    erro = 1;
  } 
  else if ((s2 >= linha) && (s3 >= linha) && (s4 <= linha) && (s5 <= linha) && (s6 >= linha) && (s7 >= linha))
  {
    erro = -1;
  } 
  else if ((s2 >= linha) && (s3 >= linha) && (s4 >= linha) && (s5 <= linha) && (s6 >= linha) && (s7 >= linha))
  {
    erro = 1.5;
  } 
  else if ((s2 >= linha) && (s3 <= linha) && (s4 >= linha) && (s5 >= linha) && (s6 >= linha) && (s7 >= linha))
  {
    erro = -1.5;
  } 
  else if ((s2 >= linha) && (s3 >= linha) && (s4 >= linha) && (s5 <= linha) && (s6 <= linha) && (s7 >= linha))
  {
    erro = 1.75;
  } 
  else if ((s2 <= linha) && (s3 <= linha) && (s4 >= linha) && (s5 >= linha) && (s6 >= linha) && (s7 >= linha) )
  {
    erro = -1.75;
  } 
  else if ((s2 <= linha) && (s3 <= linha) && (s4 >= linha) && (s5 >= linha) && (s6 >= linha) && (s7 >= linha) )
  {
     erro = 1.9;
  }
  else if ((s2 <= linha) && (s3 <= linha) && (s4 >= linha) && (s5 >= linha) && (s6 >= linha) && (s7 <= linha) )
  {
    erro = -1.9;
  }
  else if ((s2 >= linha) && (s3 >= linha) && (s4 >= linha) && (s5 >= linha) && (s6 <= linha) && (s7 <= linha))
  {
    erro = 2;
  } 
  else if ((s2 <= linha) && (s3 >= linha) && (s4 >= linha) && (s5 >= linha) && (s6 >= linha) && (s7 >= linha))
  {
    erro = -2;
  } 
}
void calculoPID (void)
{
  if (erro == 0)
  {
    I = 0;
  }
  
  P = erro; //Proporcional
  I += erro; //Integral

  if (I > 255)
  {
    I = 255;
  }
  else if (I < -255)
  {
    I = -255;
  }
  
  D = erro - erro_anterior;
  PID = (Kp * P) + (Ki * I) + (Kd * D);
}

void controle_motor (void)
{
  if (PID >= 0)
  {
    EsqVel = PotPrim;
    DirVel = PotPrim - PID;
  }
  else
  {
    EsqVel = PotPrim + PID;
    DirVel = PotPrim;
  }
}

/*Protótipo do código que será utilizado para 
mandar informações do módulo bluetooth HC-05 
até um aplicativo de celular*/
void bluethooth (void)
{
  if (Serial.available())
  {
    while (Serial.available())
    {
      char inChar = (char) Serial.read(); //lê a serial
      inputString += inChar; //monta a string

    }
    Serial.println(inputString);
    while (Serial.available() > 0)
    {
      junk = Serial.read(); //limpa buffer da serial
    }
   /* if (inputString = "a")
  { digitalWrite(11, HIGH);}
      else if (inputString =="b")
      {digitalWrite (8, OUTPUY)
  {
    inputString =" " //Limpa strig da Serial


  }
  
  }

 */
}
}

//////////////////////////////////////////////////

void Walk (void)
{
  valors2 = analogRead(A0);
  valors3 = analogRead(A1);
  valors4 = analogRead(A2);
  valors5 = analogRead(A3);
  valors6 = analogRead(A4);
  valors7 = analogRead(A5);
  
 

  if(valors2 > linha  && valors7 > linha)
  {
    analogWrite(DirVel, PotFrente); //velocidade mínima do motor equivale a 0
    analogWrite(EsqVel, PotFrente); //velociade máxima do motor equivale a 255
    digitalWrite(DirCont, LOW); //motor girando no sentido antihorário
    digitalWrite(EsqCont, LOW); //motor girando no sentido antihorário
  }

  else if (valors2 <linha && valors3 < linha )
  {

    analogWrite(DirVel, PotSec); 
    analogWrite(EsqVel, PotFrente); 
    digitalWrite(DirCont, LOW); 
    digitalWrite(EsqCont, LOW);


  }
 

  else if (valors2 > linha && valors3 > linha && valors4 < linha )
  {
    
    analogWrite(DirVel, PotSec); 
    analogWrite(EsqVel, PotFrente); 
    digitalWrite(DirCont, LOW); 
    digitalWrite(EsqCont, LOW);


  }

  else if (valors2 > linha && valors3 > linha && valors4 > linha && valors5 < linha)
  {
    
    analogWrite(DirVel, PotSec); 
    analogWrite(EsqVel, PotFrente); 
    digitalWrite(DirCont, LOW); 
    digitalWrite(EsqCont, LOW);

  }

  else if (valors2 > linha && valors3 > linha && valors4 > linha && valors5 > linha && valors6 < linha)
  {
  
    analogWrite(DirVel, PotSec); 
    analogWrite(EsqVel, PotFrente); 
    digitalWrite(DirCont, LOW); 
    digitalWrite(EsqCont, LOW);

  }
  
 

}

void parada (void)
{
if (valorsp > linha)
  {
    analogWrite(DirVel, 0);  //velocidade mínima do motor equivale a 0 
    analogWrite(EsqVel, 0); 
  } 
}


